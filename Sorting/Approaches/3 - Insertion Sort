Insertion Sort

Insertion Sort is a simple and efficient algorithm for small datasets. 
It builds the sorted list one element at a time by inserting each new element 
into its proper position among the previously sorted elements.

Working Principle:
- Start from the second element (index 1) and treat the first element as sorted.
- Compare the current element with elements in the sorted portion (to its left).
- Shift larger elements one position to the right to make space.
- Insert the current element into its correct position.
- Repeat until the entire list is sorted.

Example:
Input: [12, 11, 13, 5, 6]
After sorting: [5, 6, 11, 12, 13]

Python Code:
--------------------
def insertion_sort(arr):
    # Traverse from 1 to len(arr)
    for i in range(1, len(arr)):
        key = arr[i]  # Current element to be inserted
        j = i - 1

        # Move elements of arr[0..i-1] that are greater than key
        # to one position ahead of their current position
        while j >= 0 and arr[j] > key:
            arr[j + 1] = arr[j]
            j -= 1

        # Insert the key at its correct position
        arr[j + 1] = key

# Example usage
data = [12, 11, 13, 5, 6]
insertion_sort(data)
print("Sorted array:", data)

Time Complexity:
- Best Case: O(n)  (when the array is already sorted)
- Average Case: O(n²)
- Worst Case: O(n²)

Space Complexity:
- O(1)  (in-place sorting algorithm)

Insertion Sort is efficient for small datasets or nearly sorted arrays. 
It is often used as part of more complex algorithms like TimSort 
(for partially sorted data).