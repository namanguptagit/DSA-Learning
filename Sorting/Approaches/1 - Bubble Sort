Bubble Sort

Bubble Sort is a simple comparison-based sorting algorithm. 
It repeatedly steps through the list, compares adjacent elements, 
and swaps them if they are in the wrong order. This process 
continues until the entire list is sorted.

Working Principle:
- Compare each pair of adjacent elements.
- Swap them if they are in the wrong order (i.e., the first is greater than the second).
- After each full pass, the largest element "bubbles up" to its correct position at the end.
- Repeat the process for the remaining unsorted portion of the list.

Example:
Input: [5, 2, 9, 1, 5, 6]
After sorting: [1, 2, 5, 5, 6, 9]

Python Code:
--------------------
def bubble_sort(arr):
    n = len(arr)
    for i in range(n):
        # Last i elements are already sorted
        for j in range(0, n - i - 1):
            if arr[j] > arr[j + 1]:
                # Swap if elements are in the wrong order
                arr[j], arr[j + 1] = arr[j + 1], arr[j]

# Example usage
data = [5, 2, 9, 1, 5, 6]
bubble_sort(data)
print("Sorted array:", data)

Time Complexity:
- Best Case: O(n)
- Average Case: O(n²)
- Worst Case: O(n²)

Space Complexity:
- O(1), since it sorts the list in place.

Bubble Sort is easy to understand but inefficient for large datasets. 
It’s mainly used for educational purposes to demonstrate sorting concepts.
